public class AllIn {

    // ================== Задача 45: Арабские -> Римские ==================
    private static class RomanConverter {
        private static final int[] VALUES = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        private static final String[] SYMBOLS = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        public static String arabicToRoman(int num) {
            if (num <= 0 || num >= 10000) {
                throw new RuntimeException("Допустимый диапазон: 1 < n < 10000");
            }
            
            StringBuilder roman = new StringBuilder();
            int remaining = num;
            
            for (int i = 0; i < VALUES.length; i++) {
                while (remaining >= VALUES[i]) {
                    roman.append(SYMBOLS[i]);
                    remaining -= VALUES[i];
                }
            }
            return roman.toString();
        }
    }

    // ================== Задача 46: Римские -> Арабские ==================
    private static class ArabicConverter {
        private static int getRomanValue(char c) {
            switch(c) {
                case 'I': return 1;
                case 'V': return 5;
                case 'X': return 10;
                case 'L': return 50;
                case 'C': return 100;
                case 'D': return 500;
                case 'M': return 1000;
                default: throw new RuntimeException("Недопустимый символ: " + c);
            }
        }

        public static int romanToArabic(String roman) {
            if (roman == null || roman.isEmpty()) {
                throw new RuntimeException("Строка не может быть пустой");
            }
            
            int total = 0;
            int prevValue = 0;
            
            for (int i = roman.length() - 1; i >= 0; i--) {
                int value = getRomanValue(roman.charAt(i));
                if (value < prevValue) {
                    total -= value;
                } else {
                    total += value;
                }
                prevValue = value;
            }
            
            if (total <= 1 || total >= 10000) {
                throw new RuntimeException("Результат вне диапазона 1 < n < 10000");
            }
            return total;
        }
    }

    // ================== Задача 47: Сортировка змейкой ==================
    private static class SnailSort {
        public static int[] sort(int[][] array) {
            if (array == null || array.length == 0 || array[0].length == 0) {
                return new int[0];
            }
            
            int n = array.length;
            int[] result = new int[n * n];
            int index = 0;
            
            int rowStart = 0, rowEnd = n - 1;
            int colStart = 0, colEnd = n - 1;
            
            while (rowStart <= rowEnd && colStart <= colEnd) { //Границы текущего "слоя".
                // Вправо
                for (int i = colStart; i <= colEnd; i++) {
                    result[index++] = array[rowStart][i];
                }
                rowStart++;
                
                // Вниз
                for (int i = rowStart; i <= rowEnd; i++) {
                    result[index++] = array[i][colEnd];
                }
                colEnd--;
                
                // Влево (если есть строки)
                if (rowStart <= rowEnd) {
                    for (int i = colEnd; i >= colStart; i--) {
                        result[index++] = array[rowEnd][i];
                    }
                    rowEnd--;
                }
                
                // Вверх (если есть столбцы)
                if (colStart <= colEnd) {
                    for (int i = rowEnd; i >= rowStart; i--) {
                        result[index++] = array[i][colStart];
                    }
                    colStart++;
                }
            }
            return result;
        }
    }

    // ================== Задача 48: Последовательность u ==================
    private static class USequence {
        private static class IntList {
            private int[] data;
            private int size;
            
            public IntList() {
                data = new int[10];
                size = 0;
            }
            
            public void add(int value) {
                if (size == data.length) {
                    resize();
                }
                data[size++] = value;
            }
            
            private void resize() {
                int[] newData = new int[data.length * 2];
                for (int i = 0; i < size; i++) {
                    newData[i] = data[i];
                }
                data = newData;
            }
            
            public int get(int index) {
                return data[index];
            }
            
            public int size() {
                return size;
            }
            
            public boolean contains(int value) {
                for (int i = 0; i < size; i++) {
                    if (data[i] == value) {
                        return true;
                    }
                }
                return false;
            }
            
            public int[] toArray() {
                int[] result = new int[size];
                for (int i = 0; i < size; i++) {
                    result[i] = data[i];
                }
                return result;
            }
            
            public void sort() {
                quickSort(0, size - 1);
            }
            
            private void quickSort(int low, int high) {
                if (low < high) {
                    int pi = partition(low, high);
                    quickSort(low, pi - 1);
                    quickSort(pi + 1, high);
                }
            }
            
            private int partition(int low, int high) {
                int pivot = data[high];
                int i = low - 1;
                
                for (int j = low; j < high; j++) {
                    if (data[j] < pivot) {
                        i++;
                        swap(i, j);
                    }
                }
                swap(i + 1, high);
                return i + 1;
            }
            
            private void swap(int i, int j) {
                int temp = data[i];
                data[i] = data[j];
                data[j] = temp;
            }
        }

        public static int[] generate(int x) {
            if (x < 0) {
                throw new RuntimeException("x не может быть отрицательным");
            }
            
            IntList sequence = new IntList();
            sequence.add(1);
            
            for (int i = 0; i < x; i++) {
                int current = sequence.get(i);
                
                int y = 2 * current + 1;
                int z = 3 * current + 1;
                
                if (!sequence.contains(y)) {
                    sequence.add(y);
                }
                if (!sequence.contains(z)) {
                    sequence.add(z);
                }
            }
            
            sequence.sort();
            int[] result = new int[Math.min(x + 1, sequence.size())];
            for (int i = 0; i < result.length; i++) {
                result[i] = sequence.get(i);
            }
            return result;
        }
    }

    // ================== Задача 49: Функция fusc ==================
    private static class Fusc {
        public static int calculate(int n) {
            if (n == 0) return 0;
            if (n == 1) return 1;
            if (n % 2 == 0) {
                return calculate(n / 2);
            } else {
                int k = (n - 1) / 2;
                return calculate(k) + calculate(k + 1);
            }
        }
    }

    public static void main(String[] args) {
        // Примеры вызовов:
        System.out.println("45. Арабские -> Римские:");
        System.out.println("1984 -> " + RomanConverter.arabicToRoman(1984));
        
        System.out.println("\n46. Римские -> Арабские:");
        System.out.println("MCMLXXXIV -> " + ArabicConverter.romanToArabic("MCMLXXXIV"));
        
        System.out.println("\n47. Сортировка змейкой:");
        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int[] snailResult = SnailSort.sort(matrix);
        System.out.print("[");
        for (int i = 0; i < snailResult.length; i++) {
            System.out.print(snailResult[i]);
            if (i < snailResult.length - 1) System.out.print(", ");
        }
        System.out.println("]");
        
        System.out.println("\n48. Последовательность u:");
        int[] uSequence = USequence.generate(10);
        System.out.print("[");
        for (int i = 0; i < uSequence.length; i++) {
            System.out.print(uSequence[i]);
            if (i < uSequence.length - 1) System.out.print(", ");
        }
        System.out.println("]");
        
        System.out.println("\n49. Функция fusc:");
        for (int i = 0; i < 10; i++) {
            System.out.print(Fusc.calculate(i) + " ");
        }
    }
}
